COSC2200/
│
├── src/                  # Source files for core functionality
│   ├── model/            # Model classes representing the business logic
│   │   ├── Account.php
│   │   ├── Customer.php
│   │   ├── SavingsAccount.php
│   │   ├── GenericAccount.php
│   │   ├── CheckingAccount.php
│   │   └── PersonalAccount.php
│   │
│   ├── interface/        # Interfaces
│   │   └── Transactable.php
│   │
│   └── index.php         # Main entry point of the web application
│
├── vendor/               # Third-party dependencies (managed by Composer)
│
├── public/               # Publicly accessible files
│   ├── css/              # CSS files
│   ├── js/               # JavaScript files
│   └── index.php         # Public index file that includes src/index.php
│
├── config/               # Configuration files
│   └── database.php      # Database connection settings
│
├── tests/                # Unit and functional tests
│
├── .gitignore            # Specifies intentionally untracked files to ignore
└── README.md             # Project overview and general documentation

Week 3
--
Classroom Strategy:
1. Start with the Account Class: Explain the concept of classes, constructors, access specifiers, and methods.
2. Add the Customer Class: Introduce object relationships and aggregation.
3. Extend with SavingsAccount: Teach inheritance and method overriding.
4. Introduce Abstract and Final Classes: Discuss abstract classes and the final keyword.
5. Implement the Transactable Interface: Cover interfaces and their implementation.
6. Interactive Coding: Code together these snippets, testing and expanding on them in real-time.
7. Project Expansion: Encourage students to add features like error handling, more account types, or enhanced transaction details.

Week 4
--
In PHP, certain concepts like generics and nullable types are not directly supported in the same way they
are in languages like Java or C#. However, PHP 7.1 and later versions introduced nullable types, and while PHP does
not support generics natively, we can simulate aspects of these concepts using doc comments and type hints to make
the code more robust and understandable. We can also discuss these concepts theoretically and show how they might
be implemented in other languages, or how future versions of PHP might handle them.s

STEP 1: Nullable Types (Account.php)
Nullable types allow a type to accept null as a value. This is useful in scenarios where a variable, parameter,
or return type might legitimately need to be null.

STEP 2: GenericAccount (GenericAccount.php)
PHP does not support generics, but we can discuss how they could be implemented theoretically
and use comments (added to GenericAccount.php) to suggest generic-like behavior.

STEP 3: Defining Generic Method (Transactable.php)
Again, while PHP does not support generics, you can use doc comments to specify what types you
would expect in a language that supports generics.

Week 5
--
Custom Exceptions: Discuss how custom exceptions can provide more detailed error handling and can be caught
specifically where needed.
Delegates: (Callable Types and Anonymous Functions): Explain how callables and anonymous functions can be used
to pass custom behavior into methods, mimicking the delegate functionality found in other languages.

STEP 1: Create InsufficientFundException.php
STEP 2: Using the Custom Exception (Step 1) in PersonalAccount.php
STEP 3: Delegates (Callable Types and Anonymous Functions) Customer.php
STEP 4: Using the Callable and Exception in Practice (public/index.php)

Week 6
---
type comparisons, value comparisons, sorting collections, and simulate aspects of overloading conversion
operators and using type casting. Since PHP does not support operator overloading or have an as operator like in
some other languages.

STEP 1: Type and Value Comparison - PersonalAccount.php - Changes to three methods deposit(), withdraw(), transfer() (NEW)
STEP 2: Sorting Collections: Customer.php --> sortAccounts() added
STEP 3: Simulating Overloading Conversion Operators: Currency.php --> NEW CLASS added Week 6
STEP 4: Using Type Casting: Customer.php PHP (getAccountByNumber) fop loop using 'as'
STEP 5: Updates to index.php

STEP 6: PHPUnit Tests: PersonalAccountTest.php, SavingsAccountTest.php, phpunit.xml
STEP 7: GitHubActions: .github/workflows/phpunit.yml, created, committed, and pushed ... reviewed the Action in GitHub